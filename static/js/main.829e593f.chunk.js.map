{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["randomCommon","d3","randomSpecial","randomOpacity","App","luckyNumber","useRef","luckyIndex","luckyList","useState","commonStr","setCommonStr","specialStr","setSpecialStr","buttonDisable","setButtonDisable","useEffect","svg","append","attr","boxContaner","ballCommon","Array","from","keys","ballSpecial","col","selectAll","data","enter","d","i","indexNumber","text","randomBoxOpacity","t1","index","interval","Date","getTime","intervalTime","current","getLuckyNumber","targetNode","nodes","setTimeout","length","showFinalNumbers","setLuckyBox","stop","forEach","transition","duration","newNumber","isAdded","includes","push","commonNumbers","slice","sort","a","b","str","JSON","stringify","replace","pop","className","disabled","onClick","start","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.829e593f.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef} from 'react'\nimport './App.css'\nimport * as d3 from 'd3'\n\nconst BOXWIDTH = 20\nconst randomCommon = d3.randomInt(1, 33)\nconst randomSpecial = d3.randomInt(1, 16)\nconst randomOpacity = d3.randomUniform(0, 1)\nconst intervalTime = 400\nconst luckyColor = '#ffb31a'\n\nconst App = () => {\n  const luckyNumber = useRef(-1)\n  const luckyIndex = useRef(-1)\n  const luckyList = useRef([])\n  const [commonStr, setCommonStr] = useState('')\n  const [specialStr, setSpecialStr] = useState('')\n  const [buttonDisable, setButtonDisable] = useState(false)\n\n  useEffect(() => {\n    const w = 800\n    const h = 250\n\n    const svg = d3.select(\"#box\").append(\"svg\")\n      .attr(\"width\", w)\n      .attr(\"height\", h)\n\n    const boxContaner = svg.append('g')\n      .attr('transform', 'translate(100, 20)')\n      .attr('id', 'box-container')\n\n    const ballCommon = Array.from(new Array(33).keys())\n    const ballSpecial = Array.from(new Array(16).keys())\n\n    for (let col = 0; col < 6; col++) {\n      const colContainer = boxContaner.append('g').attr('id', `col-${col}`)\n\n      colContainer.selectAll('rect')\n        .data(ballCommon)\n        .enter()\n        .append('rect')\n        .attr('width', BOXWIDTH)\n        .attr('height', BOXWIDTH)\n        .attr('fill', '#ccc')\n        .attr('opacity', (d, i) => col % 2 === 0 ? (i % 2 === 0 ? 1 : 0.5) : (i % 2 === 0 ? 0.5 : 1))\n        .attr('x', (d, i) => i * BOXWIDTH)\n        .attr('y', d => (col + 1) * BOXWIDTH)\n    }\n\n    // special\n    const colContainer = boxContaner.append('g').attr('id', 'col-6')\n\n    colContainer.selectAll('rect')\n      .data(ballSpecial)\n      .enter()\n      .append('rect')\n      .attr('width', BOXWIDTH)\n      .attr('height', BOXWIDTH)\n      .attr('fill', '#ccc')\n      .attr('opacity', (d, i) => (i % 2 === 0 ? 1 : 0.5))\n      .attr('x', (d, i) => i * BOXWIDTH)\n      .attr('y', d => 7 * BOXWIDTH + 20)\n\n    // 渲染数字\n    const indexNumber = Array.from(new Array(33).keys())\n\n    const numberContainer = svg.append('g').attr('id', 'number-container')\n\n    numberContainer.selectAll('text')\n      .data(indexNumber)\n      .enter()\n      .append('text')\n      .text(d => d + 1)\n      .attr('fill', '#ccc')\n      .attr('x', (d, i) => i * 20 + 100)\n      .attr('y', 30)\n    \n  }, [])\n\n  const start = () => {\n    setButtonDisable(true)\n    for (let i = 0; i < 7; i++) {\n      setTimeout(() => {\n        const t1 = new Date().getTime()\n        randomBoxOpacity(t1, i)\n      }, intervalTime * 10 * i)\n    }\n  }\n\n  const setLuckyBox = () => {\n    const targetNode = d3.select('#box-container').selectAll(`#col-${luckyIndex.current} rect`).nodes()[luckyNumber.current - 1]\n    setTimeout(() => {\n      d3.select(targetNode)\n        .attr('fill', luckyColor)\n        .attr('opacity', 1)\n\n      if (luckyList.current.length === 7) {\n        showFinalNumbers()\n      }\n    }, 200)\n  }\n\n  const randomBoxOpacity = (t1, index) => {\n    const interval = d3.interval(() => {\n      if (new Date().getTime() - t1 > intervalTime * 10) {\n        luckyIndex.current += 1\n        luckyNumber.current = getLuckyNumber()\n        setLuckyBox()\n        interval.stop()\n      }\n\n      const targetBoxes = d3.select(`#col-${index}`).selectAll('rect').nodes()\n      targetBoxes.forEach(d => {\n        d3.select(d)\n          .transition()\n          .duration(100)\n          .attr('opacity', randomOpacity())\n      })\n    }, 100)\n  }\n\n  const getLuckyNumber = () => {\n    let isAdded = false\n    let newNumber\n    while (!isAdded) {\n      if (luckyList.current.length < 6) {\n        newNumber = randomCommon()\n        if (!luckyList.current.includes(newNumber)) {\n          luckyList.current.push(newNumber)\n          isAdded = true\n        }\n      } else {\n        newNumber = randomSpecial()\n        luckyList.current.push(newNumber)\n        isAdded = true\n      }\n    }\n\n    return newNumber\n  }\n\n  const showFinalNumbers = () => {\n    let commonNumbers = luckyList.current.slice(0, 6).sort((a, b) => a - b)\n    let str = JSON.stringify(commonNumbers)\n    str = str.replace('[', '')\n    str = str.replace(']', '')\n\n    setCommonStr(str)\n    setSpecialStr(luckyList.current.pop())\n  }\n\n  return (\n    <div>\n      <div className=\"title-container\">\n        <div className=\"title\">今 日 财 富 密 码</div>\n        <button\n          className=\"click-button\"\n          disabled={buttonDisable}\n          onClick={() => start()}\n        >\n          一 击 必 不 中\n        </button>\n      </div>\n      <div id=\"box\" />\n      <div className=\"lucky-number\">\n        <span>{commonStr}</span>\n        <span className=\"special\">{specialStr}</span>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}